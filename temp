FROM alpine:latest

LABEL "version"="0.0.1"

# BE build
RUN apk add --no-cache --update python3 py3-pip bash
ADD ./requirements.txt /tmp/requirements.txt
RUN pip3 install --no-cache-dir -q -r /tmp/requirements.txt

# FE build
RUN yarn install
RUN npm run webpack
RUN python manage.py collectstatic

ADD ./django /opt/django/
WORKDIR /opt/django

RUN adduser -D myuser
USER myuser

# Run the app.  CMD is required to run on Heroku
# Expose is NOT supported by Heroku
# $PORT is set by Heroku
CMD ["node server.js && gunicorn django.wsgi -w 3 --log-file -"]

http://cassandra.apache.org/doc/latest/getting_started/index.html

FROM alpine:3.8
LABEL "version"="0.0.1"
## Default to UTF-8 file.encoding
#ENV LANG C.UTF-8
#
##----JAVA-----
#
## add a simple script that can auto-detect the appropriate JAVA_HOME value
## based on whether the JDK or only the JRE is installed
#RUN { \
#		echo '#!/bin/sh'; \
#		echo 'set -e'; \
#		echo; \
#		echo 'dirname "$(dirname "$(readlink -f "$(which javac || which java)")")"'; \
#	} > /usr/local/bin/docker-java-home \
#	&& chmod +x /usr/local/bin/docker-java-home
#ENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk
#ENV PATH $PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin
#
#ENV JAVA_VERSION 8u171
#ENV JAVA_ALPINE_VERSION 8.171.11-r0
#
#RUN set -x \
#	&& apk add --no-cache \
#		openjdk8="$JAVA_ALPINE_VERSION" \
#	&& [ "$JAVA_HOME" = "$(docker-java-home)" ]

#----PYTHON-----
#
RUN apk add --no-cache python3 && \
    python3 -m ensurepip && \
    rm -r /usr/lib/python*/ensurepip && \
    pip3 install --upgrade pip setuptools && \
    if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi && \
    if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi && \
    rm -r /root/.cache

RUN apk add --update util-linux
#
##-----NODE-----
#
#ENV NODEJS_VERSION=8.11.2 \
#    PATH=$PATH:/opt/node/bin
#
#WORKDIR /opt/node
#
#RUN apk update && apk add --no-cache curl ca-certificates && \
#    curl -sL https://nodejs.org/dist/v${NODEJS_VERSION}/node-v${NODEJS_VERSION}-linux-x64.tar.gz | tar xz --strip-components=1 && \
#    rm -rf /var/lib/apt/lists/*

#-----CUSTOM-----

#WORKDIR /opt

## BE build
RUN mkdir -p /tmp
#RUN apk add --update python3 py3-pip bash
#ADD /opt/requirements.txt /tmp/requirements.txt

RUN mkdir -p /opt/django
RUN echo $(ls)
RUN pip install -q -r ./requirements.txt


RUN npm install -g -s --no-progress yarn && yarn
    #&& \ yarn run prune
    #&& \ yarn cache clean

RUN yarn run build
RUN python manage.py collectstatic --noinput

##RUN adduser -D myuser
##USER myuser
#
## Run the app.  CMD is required to run on Heroku
## Expose is NOT supported by Heroku
## $PORT is set by Heroku
CMD ["sh","-c","gunicorn django.wsgi -w 3"]


backend serves react --> maintains control over the spotify tokens,
            since frontend does require them to request the redirect
            therefore backend needs control to  redirect (at least for the
            authorization flow grant style)

/login (on button click)
    -> redirect to spotify.authorize w/ client id etc.
/callback
    -> after spotify authorize redirects here, take token and
        make ANOTHER call to spotify.token (atuhrization_code grant type)
        THEN redirect again back to website.
/refresh_token
    -> utility endpoint to refresh existing tokens

